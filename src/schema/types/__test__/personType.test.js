import schema from "../../";
import personType from "../personType";
import { graphql } from "graphql";
import { createLoaders } from "../../apiHelper";

describe("personType is a GraphQL type", () => {
  beforeEach(async () => {
    console.log = jest.fn();
    await require("../../../data").initializeDatabase();
  });

  const rootValue = {};
  const context = { loaders: createLoaders() };

  it("Has the name Person", () => {
    expect(personType.name).toBe("Person");
  });

  it("should return on every field", async () => {
    const query = `query Test {
      person(personId: 5) {
        name
        birthYear
        eyeColor
        gender
        hairColor
        height
        mass
        skinColor
        token
        id
        homeworld {
          id
          name
        }
      }
    }`;

    const { data } = await graphql(schema, query, rootValue, context);
    expect(data).toMatchSnapshot();
  });

  it("should return on every field with id", async () => {
    const query = `query Test {
      person(id: "cGVvcGxlOjU=") {
        name
        birthYear
        eyeColor
        gender
        hairColor
        height
        mass
        skinColor
        token
        id
        homeworld {
          id
          name
        }
      }
    }`;

    const { data } = await graphql(schema, query, rootValue, context);
    expect(data).toMatchSnapshot();
  });

  it("should return nothing if no argument is supplied", async () => {
    const query = `query Test {
      viewer {
        name
      }
    }`;

    const { data } = await graphql(schema, query, rootValue, context);

    expect(data.viewer).toBe(null);
  });

  it("should return nothing if id argument is invalid", async () => {
    const query = `query Test {
      viewer(id: "e") {
        name
      }
    }`;

    const result = await graphql(schema, query, rootValue, context);

    expect(result.errors).toBeDefined();
  });

  it("should return nothing if personId argument is invalid", async () => {
    const query = `query Test {
      viewer(personId: e) {
        name
      }
    }`;

    const result = await graphql(schema, query, rootValue, context);

    expect(result.errors).toBeDefined();
  });
});

// Create a new array for each autogenerated tests,
// since some requirements might change.
// This makes it easy to, for example, filter out feprecated fields
describe("PersonType fields", () => {
  const fields = personType._fields;
  const allFields = Object.keys(fields);

  allFields.map(field =>
    it(field + " has a description", () =>
      expect(fields[field].description).toBeDefined()
    )
  );

  allFields.map(field =>
    it(field + " has a type", () => expect(fields[field].type).toBeDefined())
  );

  allFields.map(field =>
    it(field + " isn't deprecated", () =>
      expect(fields[field].deprecated).toBeFalsy()
    )
  );

  allFields.map(field =>
    it(field + " has a name", () => expect(fields[field].name).toBeDefined())
  );

  allFields.map(field =>
    it(field + " has a resolve field", () =>
      expect(fields[field].resolve).toBeDefined()
    )
  );

  it("name is a string", () => expect(fields.name.type.name).toBe("String"));

  it("birthYear is a string", () =>
    expect(fields.birthYear.type.name).toBe("String"));

  it("eyeColor is a string", () =>
    expect(fields.eyeColor.type.name).toBe("String"));

  it("gender is a string", () =>
    expect(fields.gender.type.name).toBe("String"));

  it("hairColor is a string", () =>
    expect(fields.hairColor.type.name).toBe("String"));

  it("height is a int", () => expect(fields.height.type.name).toBe("Int"));

  it("mass is a int", () => expect(fields.mass.type.name).toBe("Int"));

  it("skinColor is a string", () =>
    expect(fields.skinColor.type.name).toBe("String"));

  it("homeworld is a Planet", () =>
    expect(fields.homeworld.type.name).toBe("Planet"));

  it("token is a string", () => expect(fields.token.type.name).toBe("String"));

  it("personId is a string", () =>
    expect(fields.personId.type.name).toBe("String"));

  it("created is a string", () =>
    expect(fields.created.type.name).toBe("String"));

  it("edited is a string", () =>
    expect(fields.edited.type.name).toBe("String"));

  it("id is a string", () => expect(fields.id.type.toString()).toBe("ID!"));
});
