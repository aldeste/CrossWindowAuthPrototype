import schema from "../../";
import planetType from "../planetType";
import { graphql } from "graphql";
import { createLoaders } from "../../apiHelper";

describe("planetType is a GraphQL type", () => {
  beforeEach(async () => {
    console.log = jest.fn();
    await require("../../../data").initializeDatabase();
  });

  const rootValue = {};
  const context = { loaders: createLoaders() };

  it("Has the name Planet", () => {
    expect(planetType.name).toBe("Planet");
  });

  it("should return on every field", async () => {
    const query = `query Test {
      person(personId: 1) {
        homeworld {
          name
          diameter
          rotationPeriod
          orbitalPeriod
          gravity
          population
          climates
          terrains
          surfaceWater
          residentConnection {
            edges {
              node {
                name
              }
            }
          }
          id
        }
      }
    }`;

    const { data } = await graphql(schema, query, rootValue, context);
    expect(data).toMatchSnapshot();
  });
});

// Create a new array for each autogenerated tests,
// since some requirements might change.
// This makes it easy to, for example, filter out feprecated fields
describe("PlanetType fields", () => {
  const fields = planetType._fields;
  const allFields = Object.keys(fields);

  allFields.map(field =>
    it(field + " has a description", () =>
      expect(fields[field].description).toBeDefined()
    )
  );

  allFields.map(field =>
    it(field + " has a type", () => expect(fields[field].type).toBeDefined())
  );

  allFields.map(field =>
    it(field + " isn't deprecated", () =>
      expect(fields[field].deprecated).toBeFalsy()
    )
  );

  allFields.map(field =>
    it(field + " has resolve", () =>
      expect(fields[field].resolve).toBeDefined()
    )
  );

  allFields.map(field =>
    it(field + " has a name", () => expect(fields[field].name).toBeDefined())
  );

  it("name is a String", () => expect(fields.name.type.name).toBe("String"));

  it("diameter is an Int", () => expect(fields.diameter.type.name).toBe("Int"));

  it("rotationPeriod is an Int", () =>
    expect(fields.rotationPeriod.type.name).toBe("Int"));

  it("orbitalPeriod is an Int", () =>
    expect(fields.orbitalPeriod.type.name).toBe("Int"));

  it("gravity is a String", () =>
    expect(fields.gravity.type.name).toBe("String"));

  it("population is a int", () =>
    expect(fields.population.type.name).toBe("Int"));

  it("climates is a List of Strings", () =>
    expect(fields.climates.type.toString()).toBe("[String]"));

  it("terrains is a List of Strings", () =>
    expect(fields.terrains.type.toString()).toBe("[String]"));

  it("surfaceWater is a Planet", () =>
    expect(fields.surfaceWater.type.name).toBe("Float"));

  it("residentConnection is a String", () =>
    expect(fields.residentConnection.type.name).toBe(
      "PlanetResidentsConnection"
    ));

  it("created is a String", () =>
    expect(fields.created.type.name).toBe("String"));

  it("edited is a String", () =>
    expect(fields.edited.type.name).toBe("String"));

  it("id is a String", () => expect(fields.id.type.toString()).toBe("ID!"));
});
